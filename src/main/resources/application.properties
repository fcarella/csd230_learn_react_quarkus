# https://github.com/CodeWithJuancho/Quarkus-H2/blob/master/src/main/resources/application.properties
#quarkus.datasource.db-kind=h2
#quarkus.datasource.jdbc.url=jdbc:h2:file:../src/main/resources/data/database;AUTO_SERVER=true;DB_CLOSE_DELAY=-1
#
#quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
#quarkus.hibernate-orm.database.generation=drop-and-create
#quarkus.hibernate-orm.log.sql=true

#quarkus.datasource.username=<your username>
#quarkus.datasource.password=<your password>

# --- H2 Datasource Configuration ---
quarkus.datasource.db-kind=h2
# Using a slightly different name for clarity if running side-by-side
#quarkus.datasource.jdbc.url=jdbc:h2:mem:gift_db_classic;DB_CLOSE_DELAY=-1
#quarkus.datasource.jdbc.url=jdbc:h2:file:../src/main/resources/data/database;AUTO_SERVER=true;DB_CLOSE_DELAY=-1
#
# see below
quarkus.datasource.jdbc.url=jdbc:h2:file:./data/database;AUTO_SERVER=true;DB_CLOSE_DELAY=-1
quarkus.datasource.username=sa
quarkus.datasource.password=

# --- Hibernate ORM Configuration ---
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true

quarkus.http.port=9000

#Okay, let's break down the H2 JDBC URL jdbc:h2:file:../src/main/resources/data/database;AUTO_SERVER=true;DB_CLOSE_DELAY=-1 used in quarkus.datasource.jdbc.url.
#This URL tells Quarkus (and the underlying JDBC driver) how to connect to an H2 database stored in a local file.
#Here's a component-by-component explanation:
#jdbc:
#This is the standard prefix for all JDBC (Java Database Connectivity) URLs. It indicates the protocol being used.
#h2:
#This specifies the type of database driver to use. In this case, it's the H2 database driver.
#file:
#This indicates the H2 database mode. file: means H2 should operate in embedded mode using persistent storage on the local filesystem. The database data will be saved to disk.
#Contrast this with mem:, which would mean an in-memory database where data is lost when the application stops (unless DB_CLOSE_DELAY prevents it temporarily).
#../src/main/resources/data/database
#This is the path to the database file(s).
#../: This is a relative path component meaning "go up one directory" from the current working directory.
#src/main/resources/data/: This specifies the rest of the path relative to that parent directory.
#database: This is the base name for the database files. H2 will typically create files like database.mv.db (the main data file) and possibly database.trace.db (for transaction logs).
#Working Directory Context: The starting point for the relative path (../) is the directory where the Java Virtual Machine (JVM) running the Quarkus application was launched.
#In dev mode (mvn quarkus:dev or gradle quarkusDev), this is usually the project root directory. So, ../ would go outside your project directory, and ../src/main/resources/data/database would try to create/access the database inside the src folder of whatever directory contains your project folder. This is highly unusual and likely incorrect for typical use.
#In a packaged application (e.g., running java -jar target/quarkus-app/quarkus-run.jar), the working directory depends on how you launch it. If launched from the project root, the relative path behaves as above. If launched from elsewhere, it's relative to that location.
#Recommendation: Storing runtime database files directly within src/main/resources is generally not recommended. This directory is intended for classpath resources packaged with your application, not for mutable runtime data. A better relative path for runtime data would often be just ./data/database (creating a data directory relative to where the app is run) or an absolute path. This specific path (../src/...) seems particularly prone to errors or unintended locations.
#; (Semicolon)
#This acts as a separator between the database path and additional connection parameters/options.
#AUTO_SERVER=true
#This is an H2-specific parameter that enables the "Automatic Mixed Mode".
#Problem Solved: When using a file-based H2 database (file:), only one process can typically access the database file at a time to prevent corruption.
#Solution: With AUTO_SERVER=true, the first application/process connecting to the database file automatically starts a background TCP server. Subsequent connection attempts (from the same or different processes, like the H2 Console or an IDE database tool) to the same database file URL will detect this running server and connect via TCP instead of directly accessing the file.
#Benefit: Allows multiple tools/applications (including your Quarkus app and the H2 web console simultaneously) to access the same file-based database, which is extremely useful during development and debugging.
#; (Semicolon)
#Another separator for the next parameter.
#DB_CLOSE_DELAY=-1
#This parameter controls when the H2 database is closed after the last connection to it is closed.
#-1: Means "do not close the database automatically when the last connection is closed". The database will remain open and loaded in memory (even if file-based) until the Java Virtual Machine (JVM) process explicitly closes it or exits.
#Default (usually 0): The database closes immediately when the last connection closes.
#Positive Value (e.g., 60): Waits for the specified number of seconds after the last connection closes before closing the database.
#Benefit (especially for mem: mode): Prevents the database from being wiped clean between connections, which is essential for in-memory databases used during development where different parts of the application or tests might open/close connections sequentially. For file: mode, it can potentially avoid the overhead of repeatedly opening/closing the database files if connections are frequently dropped and re-established outside a connection pool, but its primary value is keeping the database alive in the JVM.
#In Summary:
#This JDBC URL configures Quarkus to:
#Use the H2 JDBC driver.
#Connect to a persistent, file-based database.
#Look for/create the database files named database (e.g., database.mv.db) at a location specified by the relative path ../src/main/resources/data/ (which is likely not the intended or best location).
#Automatically start a server process if needed, allowing multiple tools/connections to access the same database file concurrently.
#Keep the database open in the JVM even if no connections are active, until the application shuts down.
